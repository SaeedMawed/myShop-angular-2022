
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '~@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$myShop-angular-primary: mat.define-palette(mat.$indigo-palette);
$myShop-angular-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$myShop-angular-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$myShop-angular-theme: mat.define-light-theme((
  color: (
    primary: $myShop-angular-primary,
    accent: $myShop-angular-accent,
    warn: $myShop-angular-warn,
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($myShop-angular-theme);

/* You can add global styles to this file, and also import other style files */


$theme-colors: ( "primary": #0074d9,
"danger": #ef394e,
"dark": #434343,
"info": #17a2b8,
"success":#17a2b8,
"light":#eee,
"white":#fff,
"black":#000,
);

@import "../node_modules/bootstrap/scss/bootstrap";


/*
** Overlay : all overlay in our site must have these properties
*/

@mixin overlay {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
}


/*
** Prefixes Mixin
** Auto Add Prefixes To Properties
*/

@mixin prefixer ($property, $value, $prefixes:()) {
    @each $prefix in prefixes {
        #{'-'  + $prefix + '-' + $property }: $value;
    }
    #{$property}:$value;
}


/*
** Animation Mixin
** Auto Add Prefixes To Animation
*/

@mixin keyFrame($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@keyframes rotateY {
    0%,
    80% {
        transform: rotateY(360deg);
    }
}

@include keyFrame (fadeInOut) {
    0% {
        opacity: .5;
    }
    50% {
        opacity: 1;
    }
    100% {
        opacity: .5;
    }
}

@keyframes bgcolors {
    0% {
        background-color: #017aba;
    }
    10% {
        background-color: #313337;
    }
    20% {
        background-color: #b93b47;
    }
    30% {
        background-color: #4a4f4b;
    }
    40% {
        background-color: #e8b543;
    }
    50% {
        background-color: #6573a2;
    }
    60% {
        background-color: #101012;
    }
    70% {
        background-color: #303540;
    }
    80% {
        background-color: #f23083;
    }
    90% {
        background-color: #5e4036;
    }
    100% {
        background-color: #6aaaa6;
    }
}

@mixin category-color($color) {
    .caption {
        background-color: $color;
        .btn:hover {
            color: $color !important;
        }
    }
}

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }

.confirm-dialog-container .content-container{
    margin: 5px 5px 15px 5px;
    color: #000;
    display: flex;
}


.confirm-dialog-container #close-icon{
    margin-left: auto;
    display: block;
    order: 2;
    font-weight: 700;
    cursor: pointer;
}

